// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Match extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Match entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Match must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Match", id.toString(), this);
    }
  }

  static load(id: string): Match | null {
    return changetype<Match | null>(store.get("Match", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _matchId(): BigInt {
    let value = this.get("_matchId");
    return value!.toBigInt();
  }

  set _matchId(value: BigInt) {
    this.set("_matchId", Value.fromBigInt(value));
  }

  get _teamOne(): string {
    let value = this.get("_teamOne");
    return value!.toString();
  }

  set _teamOne(value: string) {
    this.set("_teamOne", Value.fromString(value));
  }

  get _teamTwo(): string {
    let value = this.get("_teamTwo");
    return value!.toString();
  }

  set _teamTwo(value: string) {
    this.set("_teamTwo", Value.fromString(value));
  }

  get _winningTeam(): string {
    let value = this.get("_winningTeam");
    return value!.toString();
  }

  set _winningTeam(value: string) {
    this.set("_winningTeam", Value.fromString(value));
  }

  get _betIds(): Array<BigInt> {
    let value = this.get("_betIds");
    return value!.toBigIntArray();
  }

  set _betIds(value: Array<BigInt>) {
    this.set("_betIds", Value.fromBigIntArray(value));
  }
}

export class Bet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Bet entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Bet must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Bet", id.toString(), this);
    }
  }

  static load(id: string): Bet | null {
    return changetype<Bet | null>(store.get("Bet", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _matchId(): BigInt {
    let value = this.get("_matchId");
    return value!.toBigInt();
  }

  set _matchId(value: BigInt) {
    this.set("_matchId", Value.fromBigInt(value));
  }

  get _betId(): BigInt {
    let value = this.get("_betId");
    return value!.toBigInt();
  }

  set _betId(value: BigInt) {
    this.set("_betId", Value.fromBigInt(value));
  }

  get _betAmount(): BigInt {
    let value = this.get("_betAmount");
    return value!.toBigInt();
  }

  set _betAmount(value: BigInt) {
    this.set("_betAmount", Value.fromBigInt(value));
  }

  get _betMakerAddress(): string {
    let value = this.get("_betMakerAddress");
    return value!.toString();
  }

  set _betMakerAddress(value: string) {
    this.set("_betMakerAddress", Value.fromString(value));
  }

  get _betTakerAddress(): string {
    let value = this.get("_betTakerAddress");
    return value!.toString();
  }

  set _betTakerAddress(value: string) {
    this.set("_betTakerAddress", Value.fromString(value));
  }

  get _betWinnerAddress(): string {
    let value = this.get("_betWinnerAddress");
    return value!.toString();
  }

  set _betWinnerAddress(value: string) {
    this.set("_betWinnerAddress", Value.fromString(value));
  }

  get _makerBetTeam(): string {
    let value = this.get("_makerBetTeam");
    return value!.toString();
  }

  set _makerBetTeam(value: string) {
    this.set("_makerBetTeam", Value.fromString(value));
  }
}
